#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#

# get space literal:
space :=
space +=

#ON ERROR: try -MP in CFLAGS_RELEASE and CFLAGS_DEBUG

VERSION_INFO = $(shell gcc --version)
$(info $(VERSION_INFO))

WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = -I../gtk3_cell_simulator_anjuta/ -isystem /usr/lib/x86_64-linux-gnu
# I disabled -Weffc++ due to it producing too many "member initialization list" warnings even when they're not needed.
CFLAGS = -Wzero-as-null-pointer-constant -Wmain -pedantic -Wall $(subst -I, -isystem $(space), $(shell pkg-config gtkmm-3.0 --cflags)) -std=c++14 -isystem include 
RESINC = 
LIBDIR = -L/usr/lib/x86_64-linux-gnu
LIB = /usr/lib/x86_64-linux-gnu/libOpenCL.so
LDFLAGS = `pkg-config gtkmm-3.0 epoxy --libs` -lOpenCL -lGL -lGLEW -lluajit-5.1 -Wl,--export-dynamic,--dynamic-list symbols `python3-config --ldflags --embed`
#TODO: remove --export-dynamic and fill dynamic-list file "symbols" with the necessary dynamic symbol names for better performance.

# pybind:
##INC += `python3 -m pybind11 --includes`
INC += $(subst -I, -isystem $(space), $(shell python3 -m pybind11 --includes))
#LDFLAGS += -fPIC -shared
#CFLAGS += -fPIC -shared
#PYTHON_EXTENSION_SUFFIX = `python3-config --extension-suffix`

INC_DEBUG = $(INC) -Iinclude -Isimulator -Igui -Iutilities -Imodel -Icore -Irender -Isrc
CFLAGS_DEBUG = $(CFLAGS) -g -D_DEBUG -MMD
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
BUILDDIR_DEBUG = build
OBJDIR_DEBUG = $(BUILDDIR_DEBUG)/obj/debug
BINDIR_DEBUG = $(BUILDDIR_DEBUG)/bin/debug
DEP_DEBUG = 
OUT_DEBUG = $(BINDIR_DEBUG)/gtk3_cell_simulator #$(PYTHON_EXTENSION_SUFFIX)
DEPDIR_DEBUG = $(OBJDIR_DEBUG)

INC_RELEASE = $(INC) -Iinclude -Isimulator -Igui -Iutilities -Imodel -Icore -Irenderer
CFLAGS_RELEASE = $(CFLAGS) -O2 -MMD
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s
BUILDDIR_RELEASE = build
OBJDIR_RELEASE = $(BUILDDIR_RELEASE)/obj/release
BINDIR_RELEASE = $(BUILDDIR_RELEASE)/bin/debreleaseug
DEP_RELEASE = 
OUT_RELEASE = $(BINDIR_RELEASE)/gtk3_cell_simulator
DEPDIR_RELEASE = $(OBJDIR_RELEASE)

#------------------------------------------------------------------------------#
#                                FILE DETECTION                                #
#------------------------------------------------------------------------------#

SRCS = $(wildcard *.cpp) $(wildcard */*.cpp) $(wildcard */*/*.cpp) $(wildcard */*/*/*.cpp)

$(info $(SRCS))

OBJ_DEBUG = $(addprefix $(OBJDIR_DEBUG),$(addprefix /,$(SRCS:.cpp=.o)))
OBJ_RELEASE = $(addprefix $(OBJDIR_RELEASE),$(addprefix /,$(SRCS:.cpp=.o)))

DEP_DEBUG = $(OBJ_DEBUG:.o=.d)
DEP_RELEASE = $(OBJ_RELEASE:.o=.d)

#$(info $(OBJ_DEBUG_TEST))
#$(info $(CFLAGS_DEBUG) $(INC_DEBUG) -c $< -o $@)

#all: debug release
all: debug

clean: clean_debug clean_release

#------------------------------------------------------------------------------#
#                                     DEBUG                                    #
#------------------------------------------------------------------------------#

before_debug: 
	test -d $(BINDIR_DEBUG) || mkdir -p $(BINDIR_DEBUG)
	test -d $(OBJDIR_DEBUG)/src/simulator || mkdir -p $(OBJDIR_DEBUG)/src/simulator
	test -d $(OBJDIR_DEBUG)/src/cell_simulator || mkdir -p $(OBJDIR_DEBUG)/src/cell_simulator
	test -d $(OBJDIR_DEBUG)/src || mkdir -p $(OBJDIR_DEBUG)/src
	test -d $(OBJDIR_DEBUG)/src/utilities || mkdir -p $(OBJDIR_DEBUG)/src/utilities
	test -d $(OBJDIR_DEBUG)/src/core || mkdir -p $(OBJDIR_DEBUG)/src/core
	test -d $(OBJDIR_DEBUG)/src/gui || mkdir -p $(OBJDIR_DEBUG)/src/gui
	test -d $(OBJDIR_DEBUG)/src/lua || mkdir -p $(OBJDIR_DEBUG)/src/lua
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)
	test -d $(OBJDIR_DEBUG)/src/model || mkdir -p $(OBJDIR_DEBUG)/src/model
	test -d $(OBJDIR_DEBUG)/src/renderer || mkdir -p $(OBJDIR_DEBUG)/src/renderer
	test -d $(OBJDIR_DEBUG)/src/functions || mkdir -p $(OBJDIR_DEBUG)/src/functions
	test -d $(OBJDIR_DEBUG)/src/kernels || mkdir -p $(OBJDIR_DEBUG)/src/kernels
	test -d $(OBJDIR_DEBUG)/src/python || mkdir -p $(OBJDIR_DEBUG)/src/python
	test -d $(OBJDIR_DEBUG)/src/objects || mkdir -p $(OBJDIR_DEBUG)/src/objects
	test -d $(OBJDIR_DEBUG)/src/simulator/intracellular_reactions_lib || mkdir -p $(OBJDIR_DEBUG)/src/simulator/intracellular_reactions_lib
	test -d $(OBJDIR_DEBUG)/src/simulator/cell_lib || mkdir -p $(OBJDIR_DEBUG)/src/simulator/cell_lib

after_debug:
	rsync -rupE share/ $(BINDIR_DEBUG)

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG)
	
$(OBJDIR_DEBUG)/%.o: %.cpp $(DEPDIR_DEBUG)/%.d
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $< -o $@
	
$(DEPDIR_DEBUG)/%.d: ;
.PRECIOUS: $(DEPDIR_RELEASE)/%.d

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	#rm -rf ~/Builds/gtk3_cell_simulator_anjuta/bin/debug
	rm -rf $(OBJDIR_DEBUG)/simulator
	rm -rf $(OBJDIR_DEBUG)/cell_simulator
	rm -rf $(OBJDIR_DEBUG)/src
	rm -rf $(OBJDIR_DEBUG)/utilities
	rm -rf $(OBJDIR_DEBUG)/core
	rm -rf $(OBJDIR_DEBUG)/gui
	rm -rf $(OBJDIR_DEBUG)/lua
	rm -rf $(OBJDIR_DEBUG)/model
	rm -rf $(OBJDIR_DEBUG)/renderer
	rm -rf $(OBJDIR_DEBUG)/functions
	rm -rf $(OBJDIR_DEBUG)/kernels
	rm -rf $(OBJDIR_DEBUG)
	
#------------------------------------------------------------------------------#
#                                    RELEASE                                   #
#------------------------------------------------------------------------------#

before_release: 
	test -d $(BINDIR_RELEASE) || mkdir -p $(BINDIR_RELEASE)
	test -d $(OBJDIR_RELEASE)/src/simulator || mkdir -p $(OBJDIR_RELEASE)/src/simulator
	test -d $(OBJDIR_RELEASE)/src/cell_simulator || mkdir -p $(OBJDIR_RELEASE)/src/cell_simulator
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	test -d $(OBJDIR_RELEASE)/src/utilities || mkdir -p $(OBJDIR_RELEASE)//srcutilities
	test -d $(OBJDIR_RELEASE)/src/core || mkdir -p $(OBJDIR_RELEASE)/src/core
	test -d $(OBJDIR_RELEASE)/src/gui || mkdir -p $(OBJDIR_RELEASE)/src/gui
	test -d $(OBJDIR_RELEASE)/src/lua || mkdir -p $(OBJDIR_RELEASE)/src/lua
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)
	test -d $(OBJDIR_RELEASE)/src/model || mkdir -p $(OBJDIR_RELEASE)/src/model
	test -d $(OBJDIR_RELEASE)/src/renderer || mkdir -p $(OBJDIR_RELEASE)/src/renderer
	test -d $(OBJDIR_RELEASE)/src/functions || mkdir -p $(OBJDIR_RELEASE)/src/functions
	test -d $(OBJDIR_RELEASE)/src/kernels || mkdir -p $(OBJDIR_RELEASE)/src/kernels
	test -d $(OBJDIR_RELEASE)/src/python || mkdir -p $(OBJDIR_RELEASE)/src/python
	test -d $(OBJDIR_RELEASE)/src/objects || mkdir -p $(OBJDIR_RELEASE)/src/objects
	test -d $(OBJDIR_RELEASE)/src/simulator/intracellular_reactions_lib || mkdir -p $(OBJDIR_RELEASE)/src/simulator/intracellular_reactions_lib
	test -d $(OBJDIR_RELEASE)/src/simulator/cell_lib || mkdir -p $(OBJDIR_RELEASE)/src/simulator/cell_lib

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE)
	
$(OBJDIR_RELEASE)/%.o: %.cpp $(DEPDIR_RELEASE)/%.d
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $< -o $@
	
$(DEPDIR_RELEASE)/%.d: ;
.PRECIOUS: $(DEPDIR_RELEASE)/%.d

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	#rm -rf bin/release
	rm -rf $(OBJDIR_RELEASE)/simulator
	rm -rf $(OBJDIR_RELEASE)/cell_simulator
	rm -rf $(OBJDIR_RELEASE)/src
	rm -rf $(OBJDIR_RELEASE)/utilities
	rm -rf $(OBJDIR_RELEASE)/core
	rm -rf $(OBJDIR_RELEASE)/gui
	rm -rf $(OBJDIR_RELEASE)/lua
	rm -rf $(OBJDIR_RELEASE)/model
	rm -rf $(OBJDIR_RELEASE)/renderer
	rm -rf $(OBJDIR_RELEASE)/functions
	rm -rf $(OBJDIR_RELEASE)/kernels
	rm -rf $(OBJDIR_RELEASE)

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

-include $(DEP_DEBUG)
-include $(DEP_RELEASE)

